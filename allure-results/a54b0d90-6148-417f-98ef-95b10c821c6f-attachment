# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Cache Strategy Tests >> HTTP Methods cache behavior
- Location: C:\Users\naqas\OneDrive\ドキュメント\PlayWright\e2e\cacheTTLHttps.spec.js:33:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected value: undefined
Received array: ["BYPASS", "MISS"]
    at C:\Users\naqas\OneDrive\ドキュメント\PlayWright\e2e\cacheTTLHttps.spec.js:48:45
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { AuthPage } from '../pages/auth.page';
   3 | import { DomainSettingsPage } from '../pages/domainSettings.page';
   4 | const randomFloat = Math.random(); 
   5 | const flooredNum = Math.floor(randomFloat * 1000);
   6 |
   7 | test.describe('Cache Strategy Tests', () => {
   8 |     let page;
   9 |     let authPage;
  10 |     let domainSettingsPage;
  11 |     const domain = 'test-3.cwcdn.com';
  12 |     const testPaths = [
  13 |         '/test',          // Configured cached path
  14 |         '/non-cached',    // Not configured for caching
  15 |         '/image.jpg',     // Static image
  16 |         '/script.js',     // Static JS
  17 |         '/style.css',     // Static CSS
  18 |         '/api/data'       // API endpoint
  19 |     ];
  20 |
  21 |     test.beforeAll(async ({ browser }) => {
  22 |         page = await browser.newPage();
  23 |         authPage = new AuthPage(page);
  24 |         domainSettingsPage = new DomainSettingsPage(page);
  25 |         await authPage.login('qa.assessment@asians.cloud', 'qaengineer123');
  26 |     });
  27 |
  28 |     test.afterAll(async () => {
  29 |         await page.close();
  30 |     });
  31 |
  32 |
  33 | test('HTTP Methods cache behavior', async ({ request }) => {
  34 |     await domainSettingsPage.navigateToDomainList();
  35 |     await domainSettingsPage.cachestrategyToggleCheck();
  36 |     await page.waitForTimeout(6000);
  37 |     const methods = ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'];
  38 |     
  39 |     for (const method of methods) {
  40 |         const response = await request.fetch(`https://${domain}/test`, {
  41 |             method: method
  42 |         });
  43 |         console.log(`${method} request cache status: ${response.headers()['x-cache-status']}`);
  44 |         
  45 |         if (method === 'GET' || method === 'HEAD') {
  46 |             expect.soft(['HIT', 'MISS']).toContain(response.headers()['x-cache-status']);
  47 |         } else {
> 48 |             expect.soft(['BYPASS', 'MISS']).toContain(response.headers()['x-cache-status']);
     |                                             ^ Error: expect(received).toContain(expected) // indexOf
  49 |         }
  50 |     }
  51 | });
  52 |
  53 | test('Cache TTL behavior', async ({ request }) => {
  54 |     const firstResponse = await request.get(`https://${domain}/test`);
  55 |     expect.soft(firstResponse.headers()['x-cache-status']).toBe('MISS');
  56 |     
  57 |     const secondResponse = await request.get(`https://${domain}/test`);
  58 |     expect.soft(secondResponse.headers()['x-cache-status']).toBe('HIT');
  59 |     
  60 |     await new Promise(resolve => setTimeout(resolve, 61000)); // 61 seconds
  61 |     
  62 |     const thirdResponse = await request.get(`https://${domain}/test`);
  63 |     expect.soft(thirdResponse.headers()['x-cache-status']).toBe('MISS');
  64 | });
  65 | });
```